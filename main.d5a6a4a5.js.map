{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","headings","name","type","parseSalary","a","element","innerText","replace","operand","parseFloat","Number","isNaN","callback","heading","x","y","localeCompare","sort","cellInx","rowsCollection","count","indx","length","cells","b","after","handler","e","target","matches","rows","cellIndex","find","elem","addEventListener"],"mappings":";AAAA,aAEA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAW,CAAC,CAChBC,KAAM,OACNC,KAAM,UACL,CACDD,KAAM,WACNC,KAAM,UAER,CACED,KAAM,SACNC,KAAM,UAER,CACED,KAAM,MACNC,KAAM,UAER,CACED,KAAM,SACNC,KAAM,WAGR,SAASC,EAAYC,GACbC,IAAAA,EAAWD,EAAEE,UAAWC,QAAQ,MAAO,IACvCC,EAAUC,WAAWJ,EAAQE,QAAQ,KAAM,KAE7C,IAACG,OAAOC,MAAMH,GACRA,OAAAA,EAIZ,SAASI,EAASC,GACRA,OAAAA,EAAQX,MACT,IAAA,SAAiB,OAAA,SAACY,EAAGC,GAAMD,OAAAA,EAAER,UAAUU,cAAcD,EAAET,YACvD,IAAA,SAAiB,OAAA,SAACQ,EAAGC,GAAMZ,OAAAA,EAAYW,GAAKX,EAAYY,KAIjE,IAAME,EAAO,SAASC,EAASC,EAAgBN,GACzCO,IAAAA,EAED,EAAA,CACDA,EAAQ,EAEH,IAAA,IAAIC,EAAO,EAAGA,EAAOF,EAAeG,OAAS,EAAGD,IAAQ,CACrDjB,IAAAA,EAAIe,EAAeE,EAAO,GAAGE,MAAML,GACnCM,EAAIL,EAAeE,GAAME,MAAML,GAEjCN,EAASC,EAATD,CAAkBR,EAAGoB,GAAK,IAC5BL,EAAeE,GAAMI,MAAMN,EAAeE,EAAO,IACjDD,YAGGA,EAAQ,IAGbM,EAAU,SAASC,GACjBtB,IAAAA,EAAUsB,EAAEC,OAEd,GAACvB,EAAQwB,QAAQ,MAAjB,CAIEC,IAAAA,EAAOjC,EAAMiC,KACbC,EAAY1B,EAAQ0B,UACpBlB,EAAUb,EAASgC,KAAK,SAAAC,GAAQA,OAAAA,EAAKhC,OAASI,EAAQC,YAE5DW,EAAKc,EAAWD,EAAMjB,KAGxBhB,EAAMqC,iBAAiB,QAASR","file":"main.d5a6a4a5.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst headings = [{\n  name: 'Name',\n  type: 'string',\n}, {\n  name: 'Position',\n  type: 'string',\n},\n{\n  name: 'Office',\n  type: 'string',\n},\n{\n  name: 'Age',\n  type: 'number',\n},\n{\n  name: 'Salary',\n  type: 'number',\n}];\n\nfunction parseSalary(a) {\n  const element = (a.innerText).replace(/\\$/g, '');\n  const operand = parseFloat(element.replace(/,/g, ''));\n\n  if (!Number.isNaN(operand)) {\n    return (operand);\n  }\n};\n\nfunction callback(heading) {\n  switch (heading.type) {\n    case 'string': return (x, y) => x.innerText.localeCompare(y.innerText);\n    case 'number': return (x, y) => parseSalary(x) - parseSalary(y);\n  }\n}\n\nconst sort = function(cellInx, rowsCollection, heading) {\n  let count;\n\n  do {\n    count = 0;\n\n    for (let indx = 2; indx < rowsCollection.length - 1; indx++) {\n      const a = rowsCollection[indx - 1].cells[cellInx];\n      const b = rowsCollection[indx].cells[cellInx];\n\n      if (callback(heading)(a, b) > 0) {\n        rowsCollection[indx].after(rowsCollection[indx - 1]);\n        count++;\n      }\n    }\n  } while (count > 0);\n};\n\nconst handler = function(e) {\n  const element = e.target;\n\n  if (!element.matches('th')) {\n    return;\n  }\n\n  const rows = table.rows;\n  const cellIndex = element.cellIndex;\n  const heading = headings.find(elem => elem.name === element.innerText);\n\n  sort(cellIndex, rows, heading);\n};\n\ntable.addEventListener('click', handler);\n"]}